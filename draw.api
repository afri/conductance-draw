@ = require(['mho:std']);

/*
 * sample:
 *
 * drawings = {
 * 		drawin-1-id: {
 * 			segments: [
 * 					{coord:[12, 23], sid:3},
 * 					{x:12 y:23 sid:3},
 * 					{x:12 y:23 sid:3},
 * 				],
 * 		},
 * 		... 
 * 		drawin-x-id: {
 * 			segments: [
 * 					{x:12 y:23 sid:3},
 * 					{x:12 y:23 sid:3},
 * 					{x:12 y:23 sid:3},
 * 				]
 * 		},
 * 	}
 */
var drawings = {};

/*
 * Create a stream which outputs newly added segments to a drawing
 */
function changeStream(drawing){
	var clientId = drawing.clientCount;
	var idx = drawing.segments.length - 1;
	return @Stream(function(reciever){
		drawing.newSegmentEmitter.when({queue: true}){
			|client|
			idx++;
			if (client !== clientId){
				reciever(drawing.segments[idx]);
			}
		}
	});
}

/*
 * Create a function through which a client can submit new segments.
 */
function submitSegmentFunc(drawing){
	var clientId = drawing.clientCount;
	return function(segment){
		if (!segment.sid){
			segment.sid = ++drawing.strokeCount;
		}
		drawing.segments.push(segment);
		drawing.newSegmentEmitter.emit(clientId);
		return segment.sid;
	}
}

/*
 * Get a drawing.
 * Either:
 * - pass an id to fetch an existing drawing.
 * - call without arguments to create a new one.
 */
function getDrawing(drawingId){
  var log = '';
	if (!drawingId){
		//create a new drawing
		drawingId = generateDrawingId();
		while (drawings[drawingId] !== undefined){
			drawingId = generateDrawingId();
		}
		log += "creating new drawing: #{drawingId}";
		drawings[drawingId] = {
			segments:[], 
			newSegmentEmitter:@Emitter(),
			clientCount: 0,
			strokeCount: 0,
		};
	} else if (!drawings[drawingId]) {
		throw 'Unknown drawing id';
	} else {
		log += "fetching drawing: #{drawingId}";
	}
	drawings[drawingId].clientCount++;

	log += "; for client \##{drawings[drawingId].clientCount}";

	var drawing = drawings[drawingId];
	drawing.changes = drawing .. changeStream;
	drawing.submitSegment = drawing .. submitSegmentFunc;

	console.log(log);
	
	return [
			drawingId, 
			drawing,
	];
}
exports.getDrawing = getDrawing;

var words = [
	['very', 'quite', 'disturbingly', 'satisfyingly', 'distinguishably'],
	['large', 'small', 'digestable', 'weird', 'wrong'],
	['football', 'fish', 'plate', 'horse', 'sandwich', 'ashtray'],
];
function generateDrawingId(){
		var rand = a -> a[Math.floor(Math.random() * a.length)];
		return (words .. @map(rand)).join('-');
}

